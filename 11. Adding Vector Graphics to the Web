Raster images are defined using a grid of pixels — a raster image file contains information showing exactly where each pixel is to be placed, and exactly what color it should be. Popular web raster formats include Bitmap (.bmp), PNG (.png), JPEG (.jpg), and GIF (.gif.)
Vector images are defined using algorithms — a vector image file contains shape and path definitions that the computer can use to work out what the image should look like when rendered on the screen. The SVG format allows us to create powerful vector graphics for use on the Web.


Text in vector images remains accessible (which also benefits your SEO).

SVGs lend themselves well to styling/scripting, because each component of the image is an 
element that can be styled via CSS or scripted via JavaScript.

SVG can get complicated very quickly, meaning that file sizes can grow; thus taking processing time
SVG can be harder to create than raster images
SVG is not supported in older browsers

Using img
=======================================================================================================================================
<img 
    src="equilateral.svg" 
    alt="triangle with all three sides equal"
    height="87px"
    width="100px" />
    
 You cannot manipulate the image with JavaScript.
If you want to control the SVG content with CSS, you must include inline CSS styles in your SVG code. 
(External stylesheets invoked from the SVG file take no effect.)
You cannot restyle the image with CSS pseudoclasses (like :focus).

<img src="equilateral.png" alt="triangle with equal sides" srcset="equilateral.svg">

reference a PNG that'll be loaded in older browsers but also provide a svg so newer browsers can use that instead

CSS
=======================================================================================================================================
background: url("fallback.png") no-repeat center;
background-image: url("image.svg");
background-size: contain;

SVG can't be manipulated with JavaScript, and is also subject to the same CSS limitations.

SVG code inside
======================================================================================================================================
<svg width="300" height="200">
    <rect width="100%" height="100%" fill="green" />
</svg>

Pros
Putting your SVG inline saves an HTTP request, and therefore can reduce your loading time.
You can assign classes and ids to SVG elements and style them with CSS, either within the SVG or wherever 
you put the CSS style rules for your HTML document. In fact, you can use any SVG presentation attribute as a CSS property.
Inlining SVG is the only approach that lets you use CSS interactions (like :focus) and CSS animations on your SVG image 
(even in your regular stylesheet.)
You can make SVG markup into a hyperlink by wrapping it in an <a> element.

Cons
This method is only suitable if you're using the SVG in only one place. Duplication makes for resource-intensive maintenance.
Extra SVG code increases the size of your HTML file.
The browser cannot cache inline SVG as it would cache regular image assets.
You may include fallback in a <foreignObject> element, but browsers that support SVG still download any fallback images. 
You need to weigh whether the extra overhead is really worthwhile, just to support obsolescent browsers.

iframe
============================================================================================================================================
<iframe src="triangle.svg" width="500" height="500" sandbox>
    <img src="triangle.png" alt="Triangle with three unequal sides" />
</iframe>

iframes do have a fallback mechanism, as you can see, but browsers only display the fallback 
if they lack support for iframes altogether.

Moreover, unless the SVG and your current webpage have the same origin, you cannot use JavaScript 
on your main webpage to manipulate the SVG.

